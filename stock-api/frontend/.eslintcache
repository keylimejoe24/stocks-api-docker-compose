[{"/frontend/src/index.js":"1","/frontend/src/reportWebVitals.js":"2","/frontend/src/App.js":"3","/frontend/src/ScrapeList.js":"4","/frontend/src/AlgorithmsList.js":"5","/frontend/src/TestResultsList.js":"6"},{"size":784,"mtime":1671106698244,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1671090419683,"results":"9","hashOfConfig":"8"},{"size":6944,"mtime":1672695910225,"results":"10","hashOfConfig":"8"},{"size":1402,"mtime":1672407288023,"results":"11","hashOfConfig":"8"},{"size":1568,"mtime":1672433875373,"results":"12","hashOfConfig":"8"},{"size":1715,"mtime":1672440515802,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j7i0ty",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/frontend/src/index.js",[],"/frontend/src/reportWebVitals.js",[],"/frontend/src/App.js",["30"],"import './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport ScrapeList from './ScrapeList';\nimport AlgorithmsList from './AlgorithmsList';\nimport TestResultsList from './TestResultsList';\nimport Stack from '@mui/material/Stack';\nimport { v4 as uuidv4 } from 'uuid';\nimport _ from 'lodash';\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: '#fafafa',\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  margin: theme.spacing(4),\n  textAlign: 'center',\n  height: \"auto\",\n  color: theme.palette.text.secondary,\n}));\n\nconst StyledInput = styled(TextField)(({ theme }) => ({\n  margin: theme.spacing(1),\n}));\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  margin: theme.spacing(1),\n}));\n\n\nexport default function App() {\n  const [scrapeIdSelected, setScrapeIdSelected] = React.useState(\"\");\n  const [scrapeIds, setScrapeIds] = React.useState([]);\n  const [algorithmsResponse, setAlgorithmsResponse] = useState(null);\n  const [testResults, setTestResults] = useState(null);\n\n  const testResultsClickHandler = ticker => {\n\n    let testRes = _.find(algorithmsResponse.totalResults, ['ticker', ticker]);\n    let formattedTestRes = []\n    \n    for (const [key, value] of Object.entries(testRes.value)) {\n      console.log(key)\n      formattedTestRes.push({ [`${key}`]: value })\n    }\n    \n    setTestResults(formattedTestRes)\n\n  };\n\n  const onChangeHandler = event => {\n    console.log(event)\n    // setInputValue(event.target.value);\n  };\n  const onScrapIdClickedHandler = id => {\n    setScrapeIdSelected(id);\n  };\n  const formatAlgorithmsResponse = response => {\n    console.log(response)\n    let totalResults = []\n    for (const [key, value] of Object.entries(response.totalResults)) {\n      totalResults.push({ ticker: key,weight:value[\"Total Weight\"], value: value })\n    }\n    totalResults.sort((a, b) => a.ticker.localeCompare(b.ticker))\n    return {\n      ...response, totalResults: totalResults\n    }\n\n  }\n  const runAlgorithmsClickHandler = event => {\n    fetch(`http://54.224.38.99:3001/api/algorithms/run/${scrapeIdSelected}`, { method: 'GET' })\n      .then(res => res.json())\n      .then(response => {\n        let formattedRes = formatAlgorithmsResponse(response)\n        setAlgorithmsResponse(formattedRes)\n      })\n      .catch(error => console.log(error));\n\n  }\n  const scrapeStartClickHandler = event => {\n    let newScrapeId = uuidv4()\n\n    const scrapeStartrequestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: newScrapeId })\n    };\n    const scrapeRequestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ scrapeID: newScrapeId })\n    };\n\n    fetch(`http://${process.env.REACT_APP_MASTER_IP}:5000/api/v1/scrape_starts`, scrapeStartrequestOptions)\n      .then(res => res.json())\n      .then(response => {\n        setScrapeIds([...scrapeIds, ...[newScrapeId]])\n      })\n      .catch(error => console.log(error));\n\n    fetch(`http://${process.env.REACT_APP_MASTER_IP}:5000/api/v1/run_scrape`, scrapeRequestOptions)\n      .then(res => res.json())\n      .then(response => {\n        console.log(response)\n      })\n      .catch(error => console.log(error));\n  };\n\n\n  useEffect(() => {\n    fetch(`http://${process.env.REACT_APP_MASTER_IP}:5000/api/v1/scrape_starts`, { method: \"GET\" })\n      .then(res => res.json())\n      .then(response => {\n        console.log(response)\n        setScrapeIds(response)\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    const sortedScrapeIds = scrapeIds.sort((a, b) => a.createdAt - b.createdAt)\n    setScrapeIds(sortedScrapeIds)\n\n  }, [scrapeIds]);\n\n  return (\n    <div>\n      <Box sx={{ flexGrow: 1 }}>\n\n        <Grid container spacing={2}>\n\n          <Grid xs={3}>\n            <Item>\n\n              <Stack direction=\"row\">\n                <StyledButton size={'small'} color=\"success\" onClick={scrapeStartClickHandler} variant=\"outlined\">Start Scrape</StyledButton>\n              </Stack>\n\n            </Item>\n            <Item>\n              <Stack direction=\"row\">\n                <StyledInput\n                  fullWidth\n                  inputProps={{ style: { fontSize: 10 } }} // font size of input text\n                  InputLabelProps={{ style: { fontSize: 10 } }} // font size of input label\n                  disabled={scrapeIdSelected === \"\"} size={'small'} value={scrapeIdSelected} onChange={onChangeHandler} id=\"outlined-basic\" label=\"Scrape ID\" variant=\"outlined\" />              </Stack>\n\n              <Stack direction=\"row\">\n                <StyledButton sx={{ fontSize: 10 }} disabled={scrapeIdSelected === \"\"} color=\"warning\" size={'small'} onClick={() => { setScrapeIdSelected(\"\") }} variant=\"outlined\">Clear Selection</StyledButton>\n                <StyledButton sx={{ fontSize: 10 }} disabled={scrapeIdSelected === \"\"} size={'small'} onClick={runAlgorithmsClickHandler} variant=\"outlined\">Run Algorithms</StyledButton>\n              </Stack>\n\n              <ScrapeList onClickHandler={onScrapIdClickedHandler} ids={scrapeIds} />\n            </Item>\n          </Grid>\n          <Grid xs={9}>\n            <Item align={\"left\"} style={{ display: \"flex\", gap: \"1rem\", alignItems: \"center\",maxHeight: 700 }}>\n            <span style={{ minWidth:100 }}>{algorithmsResponse && <AlgorithmsList maxWidth={100} testResultsClickHandler={testResultsClickHandler} title={\"Top Ten\"}results={algorithmsResponse.topTen} />}</span>\n            <span style={{ minWidth:100 }}>{algorithmsResponse && <AlgorithmsList maxWidth={100} testResultsClickHandler={testResultsClickHandler} title={\"Bottom Ten\"}results={algorithmsResponse.bottomTen} />}</span>\n            <span style={{ minWidth:100 }}>{algorithmsResponse && <AlgorithmsList maxWidth={100} testResultsClickHandler={testResultsClickHandler} title={\"Total Results\"}results={algorithmsResponse.totalResults} />}</span>\n            <span style={{ minWidth:500 }}>{testResults && <TestResultsList  maxWidth={450} testResultsClickHandler={testResultsClickHandler} title={\"Test Results\"} results={testResults} />}</span>\n\n           \n            </Item>\n\n\n          </Grid>\n\n        </Grid>\n\n      </Box>\n\n    </div>\n\n\n\n\n  );\n}\n\n{/* <Box sx={{ flexGrow: 1 }}>\n<Grid container spacing={2}>\n  <Grid xs={8}>\n    <Item>xs=8</Item>\n  </Grid>\n  <Grid xs={4}>\n    <Item>xs=4</Item>\n  </Grid>\n  <Grid xs={4}>\n    <Item>xs=4</Item>\n  </Grid>\n  <Grid xs={8}>\n    <Item>xs=8</Item>\n  </Grid>\n</Grid>\n<NestedGrid />\n</Box> */}\n\n\n// function App() {\n\n\n//   return (\n//     <div className=\"App\">\n//     <NestedGrid />\n//     </div>\n//   );\n// }\n\n// export default App;\n","/frontend/src/ScrapeList.js",["31","32"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\n\n\n  const Row = props => {\n    const { data, index, style } = props;\n    const item = data.ids[index].id;\n    const date =  data.ids[index].created;\n    return (\n      <ListItem style={style} key={index} component=\"div\" disablePadding>\n        <ListItemButton onClick={() => data.onClickHandler(item)}>\n          <ListItemText>\n            <div style={{ fontSize: 10, fontWeight:\"bold\" }}>{\"Scrape Date: \" + date}</div>\n            <div style={{ fontSize: 10 }}>{item} </div>\n          </ListItemText>\n        </ListItemButton>\n      </ListItem>\n    );\n  };\n  \n  export default function ScrapeList({ ids,onClickHandler }) {\n    return (\n      <Box\n        sx={{ width: '100%', height: 400, maxWidth: 360, bgcolor: 'background.paper' }}\n      >\n        <FixedSizeList\n          height={400}\n          itemData={{ids,onClickHandler}}\n          // onClickHandler={onClickHandler}\n        //   ids={ids}\n        //   width={360}\n          itemSize={60}\n          itemCount={ids.length}\n          overscanCount={5}\n        >\n          {Row}\n        </FixedSizeList>\n      </Box>\n    );\n  }","/frontend/src/AlgorithmsList.js",["33","34"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\n\n\n  const Row = props => {\n    const { data, index, style } = props;\n    const item = data.results[index];\n    \n    return (\n      <ListItem style={style} key={index} component=\"div\" disablePadding>\n        <ListItemButton onClick={() => data.testResultsClickHandler(item.ticker)}>\n          <ListItemText>\n            <div style={{ fontSize: 12, fontWeight:\"bold\" }}>{item.ticker}</div>\n            <div style={{ fontSize: 10, fontWeight:\"italic\" }}>weight: {parseFloat(item.weight).toFixed(3)}</div>\n          </ListItemText>\n        </ListItemButton>\n      </ListItem>\n    );\n  };\n\n\n  export default function AlgorithmsList({ title,results,testResultsClickHandler,maxWidth  }) {\n    \n   console.log(results)\n    return (\n      <Box\n        sx={{ height: 600, maxWidth: maxWidth, bgcolor: 'background.paper' }}\n      >\n        <div style={{ fontSize: 12, fontWeight:\"bold\" }}>{title}</div>\n\n        <FixedSizeList\n          height={600}\n          itemData={{results,testResultsClickHandler}}\n          // onClickHandler={onClickHandler}\n        //   ids={ids}\n        //   width={360}\n          itemSize={60}\n          itemCount={results.length}\n          overscanCount={5}\n        >\n          {Row}\n        </FixedSizeList>\n      </Box>\n    );\n  }","/frontend/src/TestResultsList.js",["35","36"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst Row = props => {\n    const { data, index, style } = props;\n    const item = data.results[index];\n\n    let entries = Object.entries(item)\n\n\n    return (\n        <ListItem style={style} key={index} component=\"div\" >\n\n            <ListItemButton onClick={() => data.testResultsClickHandler(item.ticker)}>\n                <ListItemText key={uuidv4()}>\n                    <div style={{ fontSize: 12, fontWeight: \"bold\" }}>{entries[0][0]}</div>\n                    <pre style={{ fontSize: 8 }}>{Object.entries(entries[0][1]).map(([key, value]) => (\n                        `${key}: ${value}\\n`\n                    ))}</pre>\n\n                </ListItemText>\n\n\n\n            </ListItemButton>\n        </ListItem>\n    );\n};\n\n\nexport default function TestResultsList({ title, results, testResultsClickHandler, maxWidth }) {\n\n    console.log(results)\n    return (\n        <Box\n            sx={{ height: 600, maxWidth: maxWidth, bgcolor: 'background.paper' }}\n        >\n            <div style={{ fontSize: 12, fontWeight: \"bold\" }}>{title}</div>\n\n            <FixedSizeList\n                height={600}\n                itemData={{ results, testResultsClickHandler }}\n                itemSize={120}\n                itemCount={results.length}\n                overscanCount={5}\n\n            >\n                {Row}\n            </FixedSizeList>\n        </Box>\n    );\n}",{"ruleId":"37","severity":1,"message":"38","line":185,"column":1,"nodeType":"39","messageId":"40","endLine":201,"endColumn":11},{"ruleId":"41","severity":1,"message":"42","line":5,"column":10,"nodeType":"43","messageId":"44","endLine":5,"endColumn":18},{"ruleId":"41","severity":1,"message":"45","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":16},{"ruleId":"41","severity":1,"message":"42","line":5,"column":10,"nodeType":"43","messageId":"44","endLine":5,"endColumn":18},{"ruleId":"41","severity":1,"message":"45","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":16},{"ruleId":"41","severity":1,"message":"42","line":5,"column":10,"nodeType":"43","messageId":"44","endLine":5,"endColumn":18},{"ruleId":"41","severity":1,"message":"45","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":16},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'fontSize' is defined but never used.","Identifier","unusedVar","'format' is defined but never used."]