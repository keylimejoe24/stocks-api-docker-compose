[{"/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/index.js":"1","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/App.js":"2","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/reportWebVitals.js":"3","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/AlgorithmsList.js":"4","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/ScrapeList.js":"5","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/TestResultsList.js":"6","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/TickerList.js":"7","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/CurrencyInput.js":"8","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/ProgressBar.js":"9","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/ScrapeProgressProvider.js":"10"},{"size":539,"mtime":1673536086978,"results":"11","hashOfConfig":"12"},{"size":11329,"mtime":1673814682840,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1673304274545,"results":"14","hashOfConfig":"12"},{"size":3112,"mtime":1673444725581,"results":"15","hashOfConfig":"12"},{"size":1931,"mtime":1673546668754,"results":"16","hashOfConfig":"12"},{"size":1716,"mtime":1673304274544,"results":"17","hashOfConfig":"12"},{"size":6578,"mtime":1673644677428,"results":"18","hashOfConfig":"12"},{"size":2254,"mtime":1673372804419,"results":"19","hashOfConfig":"12"},{"size":1869,"mtime":1673644893856,"results":"20","hashOfConfig":"12"},{"size":860,"mtime":1673547835014,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"184tdj6",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/index.js",[],["49","50"],"/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/App.js",["51","52","53","54","55","56","57"],"/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/reportWebVitals.js",[],"/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/AlgorithmsList.js",["58","59","60","61","62","63","64"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\nimport React, { useState, useEffect } from \"react\";\nimport CurrencyInput from './CurrencyInput';\nimport { styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\n\n\nconst StyledInput = styled(TextField)(({ theme }) => ({\n  margin: theme.spacing(1),\n}));\n\nconst Row = props => {\n  const { data, index, style } = props;\n  const item = data.tickers[index];\n\n  return (\n    <ListItem style={style} key={index} component=\"div\" disablePadding>\n      <ListItemButton onClick={() => data.testResultsClickHandler(item.ticker)}>\n        <ListItemText>\n          <div style={{ fontSize: 12, fontWeight: \"bold\" }}>{item.ticker}</div>\n          <div style={{ fontSize: 10, fontWeight: \"italic\" }}>weight: {parseFloat(item.weight).toFixed(3)}</div>\n        </ListItemText>\n      </ListItemButton>\n    </ListItem>\n  );\n};\n\n\nexport default function AlgorithmsList({ height,title, results, testResultsClickHandler, maxWidth, withFilter }) {\n\n  const [tickerFilter, setTickerFilter] = React.useState(\"\");\n  const [marketCapFilter, setMarketCapFilter] = React.useState(\"5000000\");\n  const [filteredTickers, setFilteredTickers] = React.useState(null);\n\n\n\nconst tickerFilterChangeHandler = event => {\n    console.log(event.target.value)\n    let filteredBySymbol = results.filter(ticker => ticker.ticker.includes(event.target.value)).map(filteredTicker => {\n        return filteredTicker\n    })\n    console.log(filteredBySymbol)\n    setTickerFilter(event.target.value)\n    setFilteredTickers(filteredBySymbol);\n  };\n\n  const buildItemData = () => {\n    let tickers = filteredTickers ? filteredTickers : results\n    return {tickers, testResultsClickHandler }\n  }\n  const getItemCount = () => {\n    let tickers = filteredTickers ? filteredTickers : results\n    return tickers.length\n  }\n \n  return (\n    <Box\n      sx={{ height: 600, maxWidth: maxWidth, bgcolor: 'background.paper' }}\n    >\n      <div style={{ fontSize: 12, fontWeight: \"bold\" }}>{title}</div>\n      {withFilter && <Stack direction=\"row\">\n        <StyledInput\n          fullWidth\n          inputProps={{ style: { fontSize: 10 } }} // font size of input text\n          InputLabelProps={{ style: { fontSize: 10 } }} // font size of input label\n          size={'small'}\n          value={tickerFilter}\n          onChange={tickerFilterChangeHandler}\n          id=\"algo-outlined-basic\"\n          label=\"Ticker Symbol\"\n          variant=\"outlined\" />\n\n\n      </Stack>}\n      <FixedSizeList\n        height={height}\n        itemData={buildItemData()}\n        // onClickHandler={onClickHandler}\n        //   ids={idsÅ½s\n        //   width={360}\n        itemSize={60}\n        itemCount={getItemCount()}\n        overscanCount={5}\n      >\n        {Row}\n      </FixedSizeList>\n    </Box>\n  );\n}","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/ScrapeList.js",["65","66"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\nimport Stack from '@mui/material/Stack';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst Row = props => {\n  const { data, index, style } = props;\n  const item = data.ids[index].id;\n  const ticker_count = data.ids[index].ticker_count;\n  const date = data.ids[index].created;\n  return (\n    <ListItem style={style} key={index} component=\"div\" disablePadding>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n        <IconButton onClick={() => data.deleteOnClickHandler(item)} aria-label=\"delete\" size=\"small\">\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n        <ListItemButton onClick={() => data.onClickHandler(item)}>\n          <ListItemText>\n            <div style={{ fontSize: 10, fontWeight: \"bold\" }}>{\"Scrape Date: \" + date}</div>\n            <div style={{ fontSize: 10 }}>{item} </div>\n            <div style={{ fontSize: 10 }}>{\"Ticker Count: \" + ticker_count}</div>\n          </ListItemText>\n        </ListItemButton>\n      </Stack>\n\n    </ListItem>\n  );\n};\n\nexport default function ScrapeList({ ids, maxWidth,onClickHandler,deleteOnClickHandler }) {\n  return (\n    <Box\n      sx={{ width: '100%', height: 400, maxWidth: maxWidth, bgcolor: 'background.paper' }}\n    >\n      <FixedSizeList\n        height={400}\n        itemData={{ ids, onClickHandler,deleteOnClickHandler }}\n        // onClickHandler={onClickHandler}\n        //   ids={ids}\n        //   width={360}\n        itemSize={60}\n        itemCount={ids.length}\n        overscanCount={5}\n      >\n        {Row}\n      </FixedSizeList>\n    </Box>\n  );\n}","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/TestResultsList.js",["67","68"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\nimport { v4 as uuidv4 } from 'uuid';\n\n\n\nconst Row = props => {\n    const { data, index, style } = props;\n    const item = data.results[index];\n\n    let entries = Object.entries(item)\n\n\n    return (\n        <ListItem style={style} key={index} component=\"div\" >\n\n            <ListItemButton onClick={() => data.testResultsClickHandler(item.ticker)}>\n                <ListItemText key={uuidv4()}>\n                    <div style={{ fontSize: 12, fontWeight: \"bold\" }}>{entries[0][0]}</div>\n                    <pre style={{ fontSize: 8 }}>{Object.entries(entries[0][1]).map(([key, value]) => (\n                        `${key}: ${value}\\n`\n                    ))}</pre>\n\n                </ListItemText>\n\n\n\n            </ListItemButton>\n        </ListItem>\n    );\n};\n\n\nexport default function TestResultsList({ title, results, testResultsClickHandler, maxWidth }) {\n\n    console.log(results)\n    return (\n        <Box\n            sx={{ height: 600, maxWidth: maxWidth, bgcolor: 'background.paper' }}\n        >\n            <div style={{ fontSize: 12, fontWeight: \"bold\" }}>{title}</div>\n\n            <FixedSizeList\n                height={600}\n                itemData={{ results, testResultsClickHandler }}\n                itemSize={120}\n                itemCount={results.length}\n                overscanCount={5}\n\n            >\n                {Row}\n            </FixedSizeList>\n        </Box>\n    );\n}","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/TickerList.js",["69","70","71","72"],"import Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { fontSize } from '@mui/system';\nimport { FixedSizeList } from 'react-window';\nimport { format } from 'date-fns'\nimport CurrencyInput from './CurrencyInput';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport React, { useState, useEffect } from \"react\";\nimport ProgressBar from './ProgressBar'\nimport _ from 'lodash';\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n    margin: theme.spacing(1),\n}));\nconst StyledInput = styled(TextField)(({ theme }) => ({\n    margin: theme.spacing(1),\n}));\nconst Row = props => {\n    const { data, index, style } = props;\n    const item = data.filteredTickers[index];\n\n    return (\n        <ListItem style={style} key={index} component=\"div\" disablePadding>\n            <ListItemButton onClick={() => data.testResultsClickHandler(item.ticker)}>\n                <ListItemText>\n                    <div style={{ fontSize: 15, fontWeight: \"bold\" }}>{item.symbol}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>name: </span>{item.name}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>last sale: </span>{item.lastsale}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>percent change: </span>{item.pctchange}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>volume: </span>{item.volume}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>market cap: </span>{item.marketCap}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>country: </span>{item.country}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>ipo year: </span>{item.netchange}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>net change: </span>{item.netchange}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>industry: </span>{item.industry}</div>\n                    <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>sector: </span>{item.sector}</div>\n                </ListItemText>\n            </ListItemButton>\n        </ListItem>\n    );\n};\n\n\nexport default function TickerList({ title, results, testResultsClickHandler, maxWidth, scrapeStartClickHandler, tickerFilter, setTickerFilter, marketCapFilter, setMarketCapFilter, filteredTickers, setFilteredTickers, currentScrapeId, completedTickers,averageScrapeTime }) {\n\n\n    useEffect(() => {\n        let filteredByMarketCap = results.filter(ticker => parseFloat(ticker.marketCap) <= parseFloat(marketCapFilter)).map(filteredTicker => {\n            return filteredTicker\n        })\n        setFilteredTickers(filteredByMarketCap);\n    }, [results]);\n\n    //   useEffect(() => {\n    //     if(_.isEqual(scrapeRunning,true)){\n    //         let filteredByCompleted = filteredTickers.filter(ticker => !completedTickers.includes(ticker.symbol) ).map(filteredTicker => {\n    //             return filteredTicker\n    //         })\n    //         setFilteredTickers(filteredByCompleted);    \n    //     }\n    //   }, [scrapeRunning,completedTickers]);\n\n\n\n    const tickerFilterChangeHandler = event => {\n        let filteredBySymbol = results.filter(ticker => ticker.symbol.includes(event.target.value)).map(filteredTicker => {\n            return filteredTicker\n        })\n        setTickerFilter(event.target.value)\n        setFilteredTickers(filteredBySymbol);\n    };\n\n    const marketCapFilterChangeHandler = event => {\n\n        let filteredByMarketCap = results.filter(ticker => parseFloat(ticker.marketCap) <= parseFloat(event.target.value)).map(filteredTicker => {\n            return filteredTicker\n        })\n        setMarketCapFilter(event.target.value);\n        setFilteredTickers(filteredByMarketCap);\n    };\n\n    return (\n        <Box\n            sx={{ height: 500, maxWidth: maxWidth, bgcolor: 'background.paper' }}\n        >\n           \n\n            <div style={{ fontSize: 12, fontWeight: \"bold\" }}><div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>Total Ticker Count: </span> {results.length}</div>\n                <div style={{ fontSize: 12, fontWeight: \"italic\" }}><span style={{ fontSize: 10, fontWeight: \"bold\" }}>Filtered Ticker Count: </span> {filteredTickers.length}</div></div>\n            <StyledButton size={'small'} color=\"success\" onClick={scrapeStartClickHandler} variant=\"outlined\">Start Scrape</StyledButton>\n            <Stack direction=\"row\">\n                <CurrencyInput error={\"\"} handleChange={marketCapFilterChangeHandler} value={marketCapFilter} />\n                <StyledInput\n                    fullWidth\n                    inputProps={{ style: { fontSize: 10 } }}\n                    InputLabelProps={{ style: { fontSize: 10 } }}\n                    size={'small'}\n                    value={tickerFilter}\n                    onChange={tickerFilterChangeHandler}\n                    id=\"outlined-basic\"\n                    label=\"Ticker Symbol\"\n                    variant=\"outlined\" />\n            </Stack>\n\n            <FixedSizeList\n                height={270}\n                itemData={{ filteredTickers, testResultsClickHandler }}\n                // onClickHandler={onClickHandler}\n                //   ids={ids}\n                //   width={360}\n                itemSize={230}\n                itemCount={filteredTickers.length}\n                overscanCount={5}\n            >\n                {Row}\n            </FixedSizeList>\n            <Stack direction=\"row\">\n                {!_.isEmpty(completedTickers) && <ProgressBar averageScrapeTime={averageScrapeTime} currentScrapeId={currentScrapeId} completedTickers={completedTickers} filteredTickers={filteredTickers} />}\n            </Stack>\n        </Box>\n    );\n}","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/CurrencyInput.js",["73"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { NumericFormat } from 'react-number-format';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/material/styles';\n\nimport TextField from '@mui/material/TextField';\n\nconst StyledInput = styled(TextField)(({ theme }) => ({\n    margin: theme.spacing(1),\n}));\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(props, ref) {\n    const { onChange, ...other } = props;\n\n    return (\n        <NumericFormat\n            {...other}\n            getInputRef={ref}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: props.name,\n                        value: values.value,\n                    },\n                });\n            }}\n            thousandSeparator\n            valueIsNumericString\n            prefix='$'\n        />\n    );\n});\n\nNumberFormatCustom.propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default function CurrencyInput({ error, handleChange, value }) {\n    const [values, setValues] = React.useState({\n        numberformat: `${value}`,\n    });\n    React.useEffect(() => {\n        setValues({\n            numberformat: `${value}`,\n        });\n    }, [value]);\n    const handleChangeInput = (event) => {\n        handleChange(event);\n        setValues({\n            ...values,\n            [event.target.name]: (event.target.value),\n        });\n    };\n    // <TextField\n    //     size=\"small\"\n    //     error={error ? true : false}\n    //     helperText={error}\n    //     \n    //     \n    //     name=\"price\"\n    //     id=\"formatted-numberformat-input\"\n\n\n    // />\n    return (\n        <StyledInput\n            fullWidth\n            name=\"styled-input\"\n            inputProps={{ style: { fontSize: 10 } }} // font size of input text\n            InputLabelProps={{ style: { fontSize: 10 } }} // font size of input label\n            size={'small'}\n            value={values.numberformat}\n            onChange={handleChangeInput}\n            InputProps={{\n                inputComponent: NumberFormatCustom,\n            }}\n            id=\"outlined-basic\" label=\"Market Cap\" variant=\"outlined\" />\n    );\n}","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/ProgressBar.js",["74","75","76"],"import Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport React, { useState, useEffect,useRef,useHasChanged} from \"react\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function CircularProgressWithLabel({ completedTickers, filteredTickers,currentScrapeId,averageScrapeTime }) {\n\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    if (completedTickers.length > 0) {\n      let completedRatio = Math.min(completedTickers.length / filteredTickers.length)  * 100\n      console.log(completedRatio)\n      setProgress(completedRatio)\n    }else if(completedTickers.length === filteredTickers.length){\n      setProgress(100)\n    }\n  }, [completedTickers, filteredTickers]);\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <div>Running New Scrape </div>\n      <span style={{ fontSize: 12, fontWeight: \"bold\" }}>{\"Scrape ID: \"}</span><span style={{ fontSize: 10 }}>{currentScrapeId}</span>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ width: '100%', mr: 1 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">{`avg scrape time ${averageScrapeTime} ticker/s`}</Typography>\n          <LinearProgress variant=\"determinate\" value={progress} />\n        </Box>\n        <Box sx={{ minWidth: 35 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\n            progress,\n          )}%`}</Typography>\n        </Box>\n      </Box>\n    </Box>\n    // <Box sx={{ width: '100%',height:\"40px\" }}>\n    //   <span style={{ fontSize: 10, fontWeight: \"bold\" }}>Running Scrape </span> \n    //   <LinearProgress variant=\"determinate\" value={progress} />\n    // </Box>\n\n  );\n}\n","/Users/joejackson/dev/stocks-api-docker-compose/stock-api/frontend/src/ScrapeProgressProvider.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":23,"column":24,"nodeType":"83","messageId":"84","endLine":23,"endColumn":26},{"ruleId":"85","severity":1,"message":"86","line":89,"column":6,"nodeType":"87","endLine":89,"endColumn":8,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":93,"column":6,"nodeType":"87","endLine":93,"endColumn":33,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":97,"column":32,"nodeType":"93","messageId":"94","endLine":97,"endColumn":34},{"ruleId":"85","severity":1,"message":"95","line":101,"column":6,"nodeType":"87","endLine":101,"endColumn":18,"suggestions":"96"},{"ruleId":"81","severity":1,"message":"82","line":237,"column":34,"nodeType":"83","messageId":"84","endLine":237,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":327,"column":1,"nodeType":"99","messageId":"100","endLine":343,"endColumn":11},{"ruleId":"101","severity":1,"message":"102","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":16},{"ruleId":"101","severity":1,"message":"106","line":8,"column":17,"nodeType":"103","messageId":"104","endLine":8,"endColumn":25},{"ruleId":"101","severity":1,"message":"107","line":8,"column":27,"nodeType":"103","messageId":"104","endLine":8,"endColumn":36},{"ruleId":"101","severity":1,"message":"108","line":9,"column":8,"nodeType":"103","messageId":"104","endLine":9,"endColumn":21},{"ruleId":"101","severity":1,"message":"109","line":39,"column":10,"nodeType":"103","messageId":"104","endLine":39,"endColumn":25},{"ruleId":"101","severity":1,"message":"110","line":39,"column":27,"nodeType":"103","messageId":"104","endLine":39,"endColumn":45},{"ruleId":"101","severity":1,"message":"102","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":16},{"ruleId":"101","severity":1,"message":"102","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":16},{"ruleId":"101","severity":1,"message":"102","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":16},{"ruleId":"101","severity":1,"message":"106","line":13,"column":17,"nodeType":"103","messageId":"104","endLine":13,"endColumn":25},{"ruleId":"85","severity":1,"message":"111","line":57,"column":8,"nodeType":"87","endLine":57,"endColumn":17,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"113","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":11},{"ruleId":"101","severity":1,"message":"114","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":17},{"ruleId":"101","severity":1,"message":"115","line":5,"column":44,"nodeType":"103","messageId":"104","endLine":5,"endColumn":57},{"ruleId":"101","severity":1,"message":"116","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":21},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCompletedTickers', 'setCurrentScrapeId', and 'setCurrentlyCompletedTickers'. Either include them or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has missing dependencies: 'completedTickers' and 'setCompletedTickers'. Either include them or remove the dependency array.",["120"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'averageScrapeTime' and 'completedTickers.length'. Either include them or remove the dependency array. You can also do a functional update 'setAverageScrapeTime(a => ...)' if you only need 'averageScrapeTime' in the 'setAverageScrapeTime' call.",["121"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'fontSize' is defined but never used.","Identifier","unusedVar","'format' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'CurrencyInput' is defined but never used.","'marketCapFilter' is assigned a value but never used.","'setMarketCapFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'marketCapFilter' and 'setFilteredTickers'. Either include them or remove the dependency array. If 'setFilteredTickers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["122"],"'Box' is defined but never used.","'PropTypes' is defined but never used.","'useHasChanged' is defined but never used.","'usePrevious' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [setCompletedTickers, setCurrentScrapeId, setCurrentlyCompletedTickers]",{"range":"131","text":"132"},"Update the dependencies array to be: [completedTickers, currentlyCompletedTickers, setCompletedTickers]",{"range":"133","text":"134"},"Update the dependencies array to be: [averageScrapeTime, completedTickers.length, scrapeTime]",{"range":"135","text":"136"},"Update the dependencies array to be: [marketCapFilter, results, setFilteredTickers]",{"range":"137","text":"138"},[2794,2796],"[setCompletedTickers, setCurrentScrapeId, setCurrentlyCompletedTickers]",[2903,2930],"[completedTickers, currentlyCompletedTickers, setCompletedTickers]",[3181,3193],"[averageScrapeTime, completedTickers.length, scrapeTime]",[3504,3513],"[marketCapFilter, results, setFilteredTickers]"]