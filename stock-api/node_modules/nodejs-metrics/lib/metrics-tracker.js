"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsTracker = void 0;
class MetricsTracker {
    constructor({ metrics }) {
        this.metrics = metrics;
    }
    async trackHistogramDuration({ metricName, labels, action, handleResult }) {
        if (!action) {
            throw new Error("The action parameter is required");
        }
        if (!this.metrics) {
            return action();
        }
        this.verifyMetric(metricName);
        // eslint-disable-next-line no-param-reassign
        labels = labels || {};
        const metric = this.metrics[metricName];
        const timer = metric.startTimer(labels);
        try {
            const result = await action();
            if (handleResult) {
                handleResult(null, labels, result);
            }
            timer();
            return result;
        }
        catch (err) {
            if (handleResult) {
                handleResult(err, labels);
            }
            timer();
            throw err;
        }
    }
    incrementCounter({ count, metricName, labels }) {
        if (!this.metrics) {
            return;
        }
        this.verifyMetric(metricName);
        const metric = this.metrics[metricName];
        metric.inc(labels, count);
    }
    incrementGauge({ count, metricName, labels }) {
        if (!this.metrics) {
            return;
        }
        this.verifyMetric(metricName);
        const metric = this.metrics[metricName];
        metric.inc(labels, count);
    }
    decrementGauge({ count, metricName, labels }) {
        if (!this.metrics) {
            return;
        }
        this.verifyMetric(metricName);
        const metric = this.metrics[metricName];
        metric.dec(labels, count);
    }
    setGauge({ count, metricName, labels }) {
        if (!this.metrics) {
            return;
        }
        this.verifyMetric(metricName);
        const metric = this.metrics[metricName];
        metric.set(labels, count);
    }
    verifyMetric(metricName) {
        if (!this.metrics || !this.metrics[metricName]) {
            throw new Error(`Metric with name ${metricName} is not registered in the metrics tracker`);
        }
    }
}
exports.MetricsTracker = MetricsTracker;
//# sourceMappingURL=metrics-tracker.js.map