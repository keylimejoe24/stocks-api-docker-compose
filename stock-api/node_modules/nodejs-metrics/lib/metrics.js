"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metrics = void 0;
const express_prom_bundle_1 = __importDefault(require("express-prom-bundle"));
const prometheus_1 = require("./backends/prometheus");
const constants_1 = require("./constants");
class Metrics {
    constructor({ logger, backend, backendSettings, expressMiddlewareProvider, expressMiddlewareSettings, } = {}) {
        this.logger = logger || { ...console, child: () => this.logger };
        this.backend = backend || this.getDefaultBackend(backendSettings || {});
        this.expressMiddlewareProvider = expressMiddlewareProvider;
        this.expressMiddlewareSettings = expressMiddlewareSettings;
    }
    async init() {
        await this.backend.startServer();
        this.logger.info(`Monitoring server started on port ${this.backend.getServerPort()}.`);
    }
    getMonitoringMiddleware() {
        this.setupExpressMiddleware(this.expressMiddlewareProvider, this.expressMiddlewareSettings);
        if (!this.prometheusMiddleware) {
            throw new Error("Prometheus middleware is not initialized.");
        }
        return this.prometheusMiddleware;
    }
    async destroy() {
        await this.backend.stopServer();
        this.logger.info("Monitoring server stopped.");
    }
    getServerPort() {
        const port = this.backend.getServerPort();
        return port;
    }
    getClient() {
        return this.backend.getClient();
    }
    setupExpressMiddleware(expressMiddlewareProvider, expressMiddlewareSettings) {
        if (!this.prometheusMiddleware) {
            const metricsRegister = this.backend.getClient().register;
            if (!expressMiddlewareProvider) {
                // Use the Kinvey registry for the metrics in the middleware.
                express_prom_bundle_1.default.promClient.register = metricsRegister;
            }
            const settings = { ...constants_1.ExpressMiddlewareDefaultSettings, ...expressMiddlewareSettings };
            const provider = expressMiddlewareProvider ? expressMiddlewareProvider(metricsRegister) : express_prom_bundle_1.default;
            this.prometheusMiddleware = provider(settings);
        }
    }
    getDefaultBackend(backendSettings) {
        const settings = {
            logger: this.logger,
            ...constants_1.DefaultBackendSettings,
            ...backendSettings,
        };
        const backend = new prometheus_1.PrometheusMetricsBackend(settings);
        return backend;
    }
}
exports.Metrics = Metrics;
//# sourceMappingURL=metrics.js.map